program -> statements {% id %}

statements
    -> _ statement _ {%
            data => [data[1]]
        %}
    |  _ statement _ "\r\n" statements {%
            data => [data[1], ...data[4]]
        %}
    |  _ statement _ "\r\n\r\n" statements {%
            data => [data[1], ...data[4]]
        %}

statement
    -> set_var          {% id %}
    | print_statement   {% id %}
    | comment           {% id %}
    | while_loop        {% id %}
    | return            {% id %}

comment -> "<<" __ unary_expr __ ">>" {%
        data => {
            return {
                type: "comment",
                body: data[2]
            }
        }
    %}

while_loop -> "while" __ expression _ "(" _ "\r\n" statements _ "\r\n" _ ")" {%
            data => {
                return {
                    type: "while_loop",
                    condition: data[2],
                    body: data[7]
                }
            }
        %}

print_statement -> "print:" __ expression {%
            data => {
                return {
                    type: "print_statement",
                    expression: data[2]
                }
            }
        %}

expression
    -> bin_expr      {% id %}
    | unary_expr     {% id %}
    | boolean        {% id %}

boolean
    -> true          {% id %}
    | false          {% id %}

unary_expr
    -> num           {% id %}
    | identifier     {% id %}

true -> true {%
        data => {
            return {
                type: "boolean_expression",
                expression: Boolean(true)
            }
        }
    %}

false -> false {%
        data => {
            return {
                type: "boolean_expression",
                expression: Boolean(false)
            }
        }
    %}

bin_expr
    -> unary_expr _ operator _ expression {%
            data => {
                return {
                    type: "binary_expression",
                    operand_left: data[0],
                    operator: data[2],
                    operand_right: data[4]
                }
            }
        %}

operator
    -> "+"  {% id %}
    |  "-"  {% id %}
    |  "*"  {% id %}
    |  "/"  {% id %}
    |  ">"  {% id %}
    |  "<"  {% id %}
    |  ">=" {% id %}
    |  "<=" {% id %}
    |  "="  {% id %}

set_var -> "set" __ identifier _ "->" _ expression {%
        data => {
            return {
                type: "variable_assignment",
                name: data[2],
                value: data[6]
            }
        }
    %}

return
    -> "return:" __ expression {%
            data => {
                return {
                    type: "return_statement",
                    return_type: "expression",
                    returned: data[2]
                }
            }
        %}
    | "return:" __ statement {%
            data => {
                return {
                    type: "return_statement",
                    return_type: "statement",
                    returned: data[2]
                }
            }
        %}
    | "return:" __ "none" {%
            data => {
                return {
                    type: "return_statement",
                    return_type: "statement",
                    returned: null
                }
            }
        %}

identifier -> [a-z]:+ {%
        data => data[0].join('')
    %}

num
    -> digits "." digits {%
            data => Number(data[0] + "." + data[2])
        %}
    | digits {%
            data => Number(data[0])
        %}

digits -> [0-9]:+ {%
        data => data[0].join('')
    %}


_ -> [ ]:*
__ -> [ ]:+